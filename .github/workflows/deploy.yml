name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  # Run frontend tests
  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: Frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: Frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: Frontend
        run: npm run test:ci
        env:
          CI: true

  # Run backend tests
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run backend tests
        working-directory: Backend
        run: ./mvnw test

  # Deploy only if both frontend and backend tests pass
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Azure VM
    needs: [frontend-tests, backend-tests]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Validate project structure
        run: |
          echo "Running project validation..."
          if [ ! -f "Backend/pom.xml" ]; then
            echo "❌ Backend/pom.xml not found!"
            exit 1
          fi
          if [ ! -f "Frontend/package.json" ]; then
            echo "❌ Frontend/package.json not found!"
            exit 1
          fi
          if [ ! -f "docker-compose.yml" ]; then
            echo "❌ docker-compose.yml not found!"
            exit 1
          fi
          echo "✅ Project structure validation successful!"

      - name: Deploy to Azure VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            # Exit immediately if a command exits with a non-zero status.
            # set -e

            # Navigate to the project directory
            cd wanderwise

            # Pull the latest changes from the main branch
            git pull origin main

            # Write the environment variables from GitHub Secrets to the .env file
            echo "${{ secrets.ENV_FILE }}" > .env

            # Stop and remove old containers and networks
            docker-compose down --remove-orphans

            # Rebuild the Docker images without cache to ensure all changes are included
            docker-compose build --no-cache

            # Create and start the new containers in detached mode
            docker-compose up -d

            # Clean up unused Docker images to save space
            docker image prune -f

            # Verify deployment
            echo "✅ Deployment completed successfully!"
            echo "🔍 Checking container status..."
            docker-compose ps

      - name: Deployment Summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Azure VM |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY