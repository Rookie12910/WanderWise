spring.application.name=TripAdvisorApp

jwt.secret=bXlTZWNyZXRLZXlGb3JKV1RUb2tlbkdlbmVyYXRpb25UaGF0SXNMb25nRW5vdWdo
jwt.expiration=129600000

# H2 In-Memory Database Configuration (No PostgreSQL needed)
spring.datasource.url=jdbc:h2:mem:wanderwise
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# H2 Console (for debugging - access at http://localhost:8080/h2-console)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.format_sql=true

spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# spring.security.oauth2.client.registration.google.client-id=your_client_id_here
# spring.security.oauth2.client.registration.google.client-secret=your_client_secret_here
# spring.security.oauth2.client.registration.google.scope=openid,profile,email
# spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
# spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
# spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v2/userinfo
# spring.security.oauth2.client.provider.google.user-name-attribute=id

# CORS configuration for React frontend
spring.web.cors.allowed-origins=http://localhost:3000
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true
